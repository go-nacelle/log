// Code generated by go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	log "github.com/go-nacelle/log"
	"sync"
)

// MockLogger is a mock implementation of the Logger interface (from the
// package github.com/go-nacelle/log) used for unit testing.
type MockLogger struct {
	// DebugFunc is an instance of a mock function object controlling the
	// behavior of the method Debug.
	DebugFunc *LoggerDebugFunc
	// DebugWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method DebugWithFields.
	DebugWithFieldsFunc *LoggerDebugWithFieldsFunc
	// ErrorFunc is an instance of a mock function object controlling the
	// behavior of the method Error.
	ErrorFunc *LoggerErrorFunc
	// ErrorWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method ErrorWithFields.
	ErrorWithFieldsFunc *LoggerErrorWithFieldsFunc
	// FatalFunc is an instance of a mock function object controlling the
	// behavior of the method Fatal.
	FatalFunc *LoggerFatalFunc
	// FatalWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method FatalWithFields.
	FatalWithFieldsFunc *LoggerFatalWithFieldsFunc
	// InfoFunc is an instance of a mock function object controlling the
	// behavior of the method Info.
	InfoFunc *LoggerInfoFunc
	// InfoWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method InfoWithFields.
	InfoWithFieldsFunc *LoggerInfoWithFieldsFunc
	// LogWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method LogWithFields.
	LogWithFieldsFunc *LoggerLogWithFieldsFunc
	// SyncFunc is an instance of a mock function object controlling the
	// behavior of the method Sync.
	SyncFunc *LoggerSyncFunc
	// WarningFunc is an instance of a mock function object controlling the
	// behavior of the method Warning.
	WarningFunc *LoggerWarningFunc
	// WarningWithFieldsFunc is an instance of a mock function object
	// controlling the behavior of the method WarningWithFields.
	WarningWithFieldsFunc *LoggerWarningWithFieldsFunc
	// WithFieldsFunc is an instance of a mock function object controlling
	// the behavior of the method WithFields.
	WithFieldsFunc *LoggerWithFieldsFunc
	// WithIndirectCallerFunc is an instance of a mock function object
	// controlling the behavior of the method WithIndirectCaller.
	WithIndirectCallerFunc *LoggerWithIndirectCallerFunc
}

// NewMockLogger creates a new mock of the Logger interface. All methods
// return zero values for all results, unless overwritten.
func NewMockLogger() *MockLogger {
	return &MockLogger{
		DebugFunc: &LoggerDebugFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		DebugWithFieldsFunc: &LoggerDebugWithFieldsFunc{
			defaultHook: func(log.LogFields, string, ...interface{}) {
				return
			},
		},
		ErrorFunc: &LoggerErrorFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		ErrorWithFieldsFunc: &LoggerErrorWithFieldsFunc{
			defaultHook: func(log.LogFields, string, ...interface{}) {
				return
			},
		},
		FatalFunc: &LoggerFatalFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		FatalWithFieldsFunc: &LoggerFatalWithFieldsFunc{
			defaultHook: func(log.LogFields, string, ...interface{}) {
				return
			},
		},
		InfoFunc: &LoggerInfoFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		InfoWithFieldsFunc: &LoggerInfoWithFieldsFunc{
			defaultHook: func(log.LogFields, string, ...interface{}) {
				return
			},
		},
		LogWithFieldsFunc: &LoggerLogWithFieldsFunc{
			defaultHook: func(log.LogLevel, log.LogFields, string, ...interface{}) {
				return
			},
		},
		SyncFunc: &LoggerSyncFunc{
			defaultHook: func() error {
				return nil
			},
		},
		WarningFunc: &LoggerWarningFunc{
			defaultHook: func(string, ...interface{}) {
				return
			},
		},
		WarningWithFieldsFunc: &LoggerWarningWithFieldsFunc{
			defaultHook: func(log.LogFields, string, ...interface{}) {
				return
			},
		},
		WithFieldsFunc: &LoggerWithFieldsFunc{
			defaultHook: func(log.LogFields) log.Logger {
				return nil
			},
		},
		WithIndirectCallerFunc: &LoggerWithIndirectCallerFunc{
			defaultHook: func(int) log.Logger {
				return nil
			},
		},
	}
}

// NewMockLoggerFrom creates a new mock of the MockLogger interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockLoggerFrom(i log.Logger) *MockLogger {
	return &MockLogger{
		DebugFunc: &LoggerDebugFunc{
			defaultHook: i.Debug,
		},
		DebugWithFieldsFunc: &LoggerDebugWithFieldsFunc{
			defaultHook: i.DebugWithFields,
		},
		ErrorFunc: &LoggerErrorFunc{
			defaultHook: i.Error,
		},
		ErrorWithFieldsFunc: &LoggerErrorWithFieldsFunc{
			defaultHook: i.ErrorWithFields,
		},
		FatalFunc: &LoggerFatalFunc{
			defaultHook: i.Fatal,
		},
		FatalWithFieldsFunc: &LoggerFatalWithFieldsFunc{
			defaultHook: i.FatalWithFields,
		},
		InfoFunc: &LoggerInfoFunc{
			defaultHook: i.Info,
		},
		InfoWithFieldsFunc: &LoggerInfoWithFieldsFunc{
			defaultHook: i.InfoWithFields,
		},
		LogWithFieldsFunc: &LoggerLogWithFieldsFunc{
			defaultHook: i.LogWithFields,
		},
		SyncFunc: &LoggerSyncFunc{
			defaultHook: i.Sync,
		},
		WarningFunc: &LoggerWarningFunc{
			defaultHook: i.Warning,
		},
		WarningWithFieldsFunc: &LoggerWarningWithFieldsFunc{
			defaultHook: i.WarningWithFields,
		},
		WithFieldsFunc: &LoggerWithFieldsFunc{
			defaultHook: i.WithFields,
		},
		WithIndirectCallerFunc: &LoggerWithIndirectCallerFunc{
			defaultHook: i.WithIndirectCaller,
		},
	}
}

// LoggerDebugFunc describes the behavior when the Debug method of the
// parent MockLogger instance is invoked.
type LoggerDebugFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []LoggerDebugFuncCall
	mutex       sync.Mutex
}

// Debug delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Debug(v0 string, v1 ...interface{}) {
	m.DebugFunc.nextHook()(v0, v1...)
	m.DebugFunc.appendCall(LoggerDebugFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Debug method of the
// parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerDebugFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Debug method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerDebugFunc) PushHook(hook func(string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerDebugFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerDebugFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *LoggerDebugFunc) nextHook() func(string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerDebugFunc) appendCall(r0 LoggerDebugFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerDebugFuncCall objects describing the
// invocations of this function.
func (f *LoggerDebugFunc) History() []LoggerDebugFuncCall {
	f.mutex.Lock()
	history := make([]LoggerDebugFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerDebugFuncCall is an object that describes an invocation of method
// Debug on an instance of MockLogger.
type LoggerDebugFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerDebugFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerDebugFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerDebugWithFieldsFunc describes the behavior when the DebugWithFields
// method of the parent MockLogger instance is invoked.
type LoggerDebugWithFieldsFunc struct {
	defaultHook func(log.LogFields, string, ...interface{})
	hooks       []func(log.LogFields, string, ...interface{})
	history     []LoggerDebugWithFieldsFuncCall
	mutex       sync.Mutex
}

// DebugWithFields delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) DebugWithFields(v0 log.LogFields, v1 string, v2 ...interface{}) {
	m.DebugWithFieldsFunc.nextHook()(v0, v1, v2...)
	m.DebugWithFieldsFunc.appendCall(LoggerDebugWithFieldsFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the DebugWithFields
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerDebugWithFieldsFunc) SetDefaultHook(hook func(log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// DebugWithFields method of the parent MockLogger instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerDebugWithFieldsFunc) PushHook(hook func(log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerDebugWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerDebugWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerDebugWithFieldsFunc) nextHook() func(log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerDebugWithFieldsFunc) appendCall(r0 LoggerDebugWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerDebugWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerDebugWithFieldsFunc) History() []LoggerDebugWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerDebugWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerDebugWithFieldsFuncCall is an object that describes an invocation
// of method DebugWithFields on an instance of MockLogger.
type LoggerDebugWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerDebugWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerDebugWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerErrorFunc describes the behavior when the Error method of the
// parent MockLogger instance is invoked.
type LoggerErrorFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []LoggerErrorFuncCall
	mutex       sync.Mutex
}

// Error delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Error(v0 string, v1 ...interface{}) {
	m.ErrorFunc.nextHook()(v0, v1...)
	m.ErrorFunc.appendCall(LoggerErrorFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Error method of the
// parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerErrorFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Error method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerErrorFunc) PushHook(hook func(string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerErrorFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerErrorFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *LoggerErrorFunc) nextHook() func(string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerErrorFunc) appendCall(r0 LoggerErrorFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerErrorFuncCall objects describing the
// invocations of this function.
func (f *LoggerErrorFunc) History() []LoggerErrorFuncCall {
	f.mutex.Lock()
	history := make([]LoggerErrorFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerErrorFuncCall is an object that describes an invocation of method
// Error on an instance of MockLogger.
type LoggerErrorFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerErrorFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerErrorFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerErrorWithFieldsFunc describes the behavior when the ErrorWithFields
// method of the parent MockLogger instance is invoked.
type LoggerErrorWithFieldsFunc struct {
	defaultHook func(log.LogFields, string, ...interface{})
	hooks       []func(log.LogFields, string, ...interface{})
	history     []LoggerErrorWithFieldsFuncCall
	mutex       sync.Mutex
}

// ErrorWithFields delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) ErrorWithFields(v0 log.LogFields, v1 string, v2 ...interface{}) {
	m.ErrorWithFieldsFunc.nextHook()(v0, v1, v2...)
	m.ErrorWithFieldsFunc.appendCall(LoggerErrorWithFieldsFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the ErrorWithFields
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerErrorWithFieldsFunc) SetDefaultHook(hook func(log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ErrorWithFields method of the parent MockLogger instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerErrorWithFieldsFunc) PushHook(hook func(log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerErrorWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerErrorWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerErrorWithFieldsFunc) nextHook() func(log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerErrorWithFieldsFunc) appendCall(r0 LoggerErrorWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerErrorWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerErrorWithFieldsFunc) History() []LoggerErrorWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerErrorWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerErrorWithFieldsFuncCall is an object that describes an invocation
// of method ErrorWithFields on an instance of MockLogger.
type LoggerErrorWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerErrorWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerErrorWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerFatalFunc describes the behavior when the Fatal method of the
// parent MockLogger instance is invoked.
type LoggerFatalFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []LoggerFatalFuncCall
	mutex       sync.Mutex
}

// Fatal delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Fatal(v0 string, v1 ...interface{}) {
	m.FatalFunc.nextHook()(v0, v1...)
	m.FatalFunc.appendCall(LoggerFatalFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Fatal method of the
// parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerFatalFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Fatal method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerFatalFunc) PushHook(hook func(string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerFatalFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerFatalFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *LoggerFatalFunc) nextHook() func(string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerFatalFunc) appendCall(r0 LoggerFatalFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerFatalFuncCall objects describing the
// invocations of this function.
func (f *LoggerFatalFunc) History() []LoggerFatalFuncCall {
	f.mutex.Lock()
	history := make([]LoggerFatalFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerFatalFuncCall is an object that describes an invocation of method
// Fatal on an instance of MockLogger.
type LoggerFatalFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerFatalFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerFatalFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerFatalWithFieldsFunc describes the behavior when the FatalWithFields
// method of the parent MockLogger instance is invoked.
type LoggerFatalWithFieldsFunc struct {
	defaultHook func(log.LogFields, string, ...interface{})
	hooks       []func(log.LogFields, string, ...interface{})
	history     []LoggerFatalWithFieldsFuncCall
	mutex       sync.Mutex
}

// FatalWithFields delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) FatalWithFields(v0 log.LogFields, v1 string, v2 ...interface{}) {
	m.FatalWithFieldsFunc.nextHook()(v0, v1, v2...)
	m.FatalWithFieldsFunc.appendCall(LoggerFatalWithFieldsFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the FatalWithFields
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerFatalWithFieldsFunc) SetDefaultHook(hook func(log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// FatalWithFields method of the parent MockLogger instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerFatalWithFieldsFunc) PushHook(hook func(log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerFatalWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerFatalWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerFatalWithFieldsFunc) nextHook() func(log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerFatalWithFieldsFunc) appendCall(r0 LoggerFatalWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerFatalWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerFatalWithFieldsFunc) History() []LoggerFatalWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerFatalWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerFatalWithFieldsFuncCall is an object that describes an invocation
// of method FatalWithFields on an instance of MockLogger.
type LoggerFatalWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerFatalWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerFatalWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerInfoFunc describes the behavior when the Info method of the parent
// MockLogger instance is invoked.
type LoggerInfoFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []LoggerInfoFuncCall
	mutex       sync.Mutex
}

// Info delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Info(v0 string, v1 ...interface{}) {
	m.InfoFunc.nextHook()(v0, v1...)
	m.InfoFunc.appendCall(LoggerInfoFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Info method of the
// parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerInfoFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Info method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerInfoFunc) PushHook(hook func(string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerInfoFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerInfoFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *LoggerInfoFunc) nextHook() func(string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerInfoFunc) appendCall(r0 LoggerInfoFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerInfoFuncCall objects describing the
// invocations of this function.
func (f *LoggerInfoFunc) History() []LoggerInfoFuncCall {
	f.mutex.Lock()
	history := make([]LoggerInfoFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerInfoFuncCall is an object that describes an invocation of method
// Info on an instance of MockLogger.
type LoggerInfoFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerInfoFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerInfoFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerInfoWithFieldsFunc describes the behavior when the InfoWithFields
// method of the parent MockLogger instance is invoked.
type LoggerInfoWithFieldsFunc struct {
	defaultHook func(log.LogFields, string, ...interface{})
	hooks       []func(log.LogFields, string, ...interface{})
	history     []LoggerInfoWithFieldsFuncCall
	mutex       sync.Mutex
}

// InfoWithFields delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) InfoWithFields(v0 log.LogFields, v1 string, v2 ...interface{}) {
	m.InfoWithFieldsFunc.nextHook()(v0, v1, v2...)
	m.InfoWithFieldsFunc.appendCall(LoggerInfoWithFieldsFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the InfoWithFields
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerInfoWithFieldsFunc) SetDefaultHook(hook func(log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// InfoWithFields method of the parent MockLogger instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerInfoWithFieldsFunc) PushHook(hook func(log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerInfoWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerInfoWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerInfoWithFieldsFunc) nextHook() func(log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerInfoWithFieldsFunc) appendCall(r0 LoggerInfoWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerInfoWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerInfoWithFieldsFunc) History() []LoggerInfoWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerInfoWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerInfoWithFieldsFuncCall is an object that describes an invocation of
// method InfoWithFields on an instance of MockLogger.
type LoggerInfoWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerInfoWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerInfoWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerLogWithFieldsFunc describes the behavior when the LogWithFields
// method of the parent MockLogger instance is invoked.
type LoggerLogWithFieldsFunc struct {
	defaultHook func(log.LogLevel, log.LogFields, string, ...interface{})
	hooks       []func(log.LogLevel, log.LogFields, string, ...interface{})
	history     []LoggerLogWithFieldsFuncCall
	mutex       sync.Mutex
}

// LogWithFields delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLogger) LogWithFields(v0 log.LogLevel, v1 log.LogFields, v2 string, v3 ...interface{}) {
	m.LogWithFieldsFunc.nextHook()(v0, v1, v2, v3...)
	m.LogWithFieldsFunc.appendCall(LoggerLogWithFieldsFuncCall{v0, v1, v2, v3})
	return
}

// SetDefaultHook sets function that is called when the LogWithFields method
// of the parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerLogWithFieldsFunc) SetDefaultHook(hook func(log.LogLevel, log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// LogWithFields method of the parent MockLogger instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerLogWithFieldsFunc) PushHook(hook func(log.LogLevel, log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerLogWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogLevel, log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerLogWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogLevel, log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerLogWithFieldsFunc) nextHook() func(log.LogLevel, log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerLogWithFieldsFunc) appendCall(r0 LoggerLogWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerLogWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerLogWithFieldsFunc) History() []LoggerLogWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerLogWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerLogWithFieldsFuncCall is an object that describes an invocation of
// method LogWithFields on an instance of MockLogger.
type LoggerLogWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogLevel
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 log.LogFields
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerLogWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerLogWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerSyncFunc describes the behavior when the Sync method of the parent
// MockLogger instance is invoked.
type LoggerSyncFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []LoggerSyncFuncCall
	mutex       sync.Mutex
}

// Sync delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Sync() error {
	r0 := m.SyncFunc.nextHook()()
	m.SyncFunc.appendCall(LoggerSyncFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Sync method of the
// parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerSyncFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Sync method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerSyncFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerSyncFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerSyncFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *LoggerSyncFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerSyncFunc) appendCall(r0 LoggerSyncFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerSyncFuncCall objects describing the
// invocations of this function.
func (f *LoggerSyncFunc) History() []LoggerSyncFuncCall {
	f.mutex.Lock()
	history := make([]LoggerSyncFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerSyncFuncCall is an object that describes an invocation of method
// Sync on an instance of MockLogger.
type LoggerSyncFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LoggerSyncFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerSyncFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// LoggerWarningFunc describes the behavior when the Warning method of the
// parent MockLogger instance is invoked.
type LoggerWarningFunc struct {
	defaultHook func(string, ...interface{})
	hooks       []func(string, ...interface{})
	history     []LoggerWarningFuncCall
	mutex       sync.Mutex
}

// Warning delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogger) Warning(v0 string, v1 ...interface{}) {
	m.WarningFunc.nextHook()(v0, v1...)
	m.WarningFunc.appendCall(LoggerWarningFuncCall{v0, v1})
	return
}

// SetDefaultHook sets function that is called when the Warning method of
// the parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerWarningFunc) SetDefaultHook(hook func(string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Warning method of the parent MockLogger instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoggerWarningFunc) PushHook(hook func(string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerWarningFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerWarningFunc) PushReturn() {
	f.PushHook(func(string, ...interface{}) {
		return
	})
}

func (f *LoggerWarningFunc) nextHook() func(string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerWarningFunc) appendCall(r0 LoggerWarningFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerWarningFuncCall objects describing
// the invocations of this function.
func (f *LoggerWarningFunc) History() []LoggerWarningFuncCall {
	f.mutex.Lock()
	history := make([]LoggerWarningFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerWarningFuncCall is an object that describes an invocation of method
// Warning on an instance of MockLogger.
type LoggerWarningFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 string
	// Arg1 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg1 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerWarningFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg1 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerWarningFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerWarningWithFieldsFunc describes the behavior when the
// WarningWithFields method of the parent MockLogger instance is invoked.
type LoggerWarningWithFieldsFunc struct {
	defaultHook func(log.LogFields, string, ...interface{})
	hooks       []func(log.LogFields, string, ...interface{})
	history     []LoggerWarningWithFieldsFuncCall
	mutex       sync.Mutex
}

// WarningWithFields delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) WarningWithFields(v0 log.LogFields, v1 string, v2 ...interface{}) {
	m.WarningWithFieldsFunc.nextHook()(v0, v1, v2...)
	m.WarningWithFieldsFunc.appendCall(LoggerWarningWithFieldsFuncCall{v0, v1, v2})
	return
}

// SetDefaultHook sets function that is called when the WarningWithFields
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerWarningWithFieldsFunc) SetDefaultHook(hook func(log.LogFields, string, ...interface{})) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WarningWithFields method of the parent MockLogger instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LoggerWarningWithFieldsFunc) PushHook(hook func(log.LogFields, string, ...interface{})) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerWarningWithFieldsFunc) SetDefaultReturn() {
	f.SetDefaultHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerWarningWithFieldsFunc) PushReturn() {
	f.PushHook(func(log.LogFields, string, ...interface{}) {
		return
	})
}

func (f *LoggerWarningWithFieldsFunc) nextHook() func(log.LogFields, string, ...interface{}) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerWarningWithFieldsFunc) appendCall(r0 LoggerWarningWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerWarningWithFieldsFuncCall objects
// describing the invocations of this function.
func (f *LoggerWarningWithFieldsFunc) History() []LoggerWarningWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerWarningWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerWarningWithFieldsFuncCall is an object that describes an invocation
// of method WarningWithFields on an instance of MockLogger.
type LoggerWarningWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg2 []interface{}
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c LoggerWarningWithFieldsFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg2 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerWarningWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{}
}

// LoggerWithFieldsFunc describes the behavior when the WithFields method of
// the parent MockLogger instance is invoked.
type LoggerWithFieldsFunc struct {
	defaultHook func(log.LogFields) log.Logger
	hooks       []func(log.LogFields) log.Logger
	history     []LoggerWithFieldsFuncCall
	mutex       sync.Mutex
}

// WithFields delegates to the next hook function in the queue and stores
// the parameter and result values of this invocation.
func (m *MockLogger) WithFields(v0 log.LogFields) log.Logger {
	r0 := m.WithFieldsFunc.nextHook()(v0)
	m.WithFieldsFunc.appendCall(LoggerWithFieldsFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithFields method of
// the parent MockLogger instance is invoked and the hook queue is empty.
func (f *LoggerWithFieldsFunc) SetDefaultHook(hook func(log.LogFields) log.Logger) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithFields method of the parent MockLogger instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *LoggerWithFieldsFunc) PushHook(hook func(log.LogFields) log.Logger) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerWithFieldsFunc) SetDefaultReturn(r0 log.Logger) {
	f.SetDefaultHook(func(log.LogFields) log.Logger {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerWithFieldsFunc) PushReturn(r0 log.Logger) {
	f.PushHook(func(log.LogFields) log.Logger {
		return r0
	})
}

func (f *LoggerWithFieldsFunc) nextHook() func(log.LogFields) log.Logger {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerWithFieldsFunc) appendCall(r0 LoggerWithFieldsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerWithFieldsFuncCall objects describing
// the invocations of this function.
func (f *LoggerWithFieldsFunc) History() []LoggerWithFieldsFuncCall {
	f.mutex.Lock()
	history := make([]LoggerWithFieldsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerWithFieldsFuncCall is an object that describes an invocation of
// method WithFields on an instance of MockLogger.
type LoggerWithFieldsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 log.LogFields
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 log.Logger
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LoggerWithFieldsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerWithFieldsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// LoggerWithIndirectCallerFunc describes the behavior when the
// WithIndirectCaller method of the parent MockLogger instance is invoked.
type LoggerWithIndirectCallerFunc struct {
	defaultHook func(int) log.Logger
	hooks       []func(int) log.Logger
	history     []LoggerWithIndirectCallerFuncCall
	mutex       sync.Mutex
}

// WithIndirectCaller delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockLogger) WithIndirectCaller(v0 int) log.Logger {
	r0 := m.WithIndirectCallerFunc.nextHook()(v0)
	m.WithIndirectCallerFunc.appendCall(LoggerWithIndirectCallerFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the WithIndirectCaller
// method of the parent MockLogger instance is invoked and the hook queue is
// empty.
func (f *LoggerWithIndirectCallerFunc) SetDefaultHook(hook func(int) log.Logger) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// WithIndirectCaller method of the parent MockLogger instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *LoggerWithIndirectCallerFunc) PushHook(hook func(int) log.Logger) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoggerWithIndirectCallerFunc) SetDefaultReturn(r0 log.Logger) {
	f.SetDefaultHook(func(int) log.Logger {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoggerWithIndirectCallerFunc) PushReturn(r0 log.Logger) {
	f.PushHook(func(int) log.Logger {
		return r0
	})
}

func (f *LoggerWithIndirectCallerFunc) nextHook() func(int) log.Logger {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoggerWithIndirectCallerFunc) appendCall(r0 LoggerWithIndirectCallerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoggerWithIndirectCallerFuncCall objects
// describing the invocations of this function.
func (f *LoggerWithIndirectCallerFunc) History() []LoggerWithIndirectCallerFuncCall {
	f.mutex.Lock()
	history := make([]LoggerWithIndirectCallerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoggerWithIndirectCallerFuncCall is an object that describes an
// invocation of method WithIndirectCaller on an instance of MockLogger.
type LoggerWithIndirectCallerFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 log.Logger
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LoggerWithIndirectCallerFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoggerWithIndirectCallerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
